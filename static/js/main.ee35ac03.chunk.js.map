{"version":3,"sources":["components/card/card.component.js","components/card-list/card-list.js","components/search-box/search-box.component.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","handleSearch","e","console","log","target","value","setState","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAYeA,EAVF,SAACC,GACZ,OACA,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,2BACtB,6BAAKL,EAAMI,QAAQE,OACnB,6BAAKN,EAAMI,QAAQG,YCMRC,EAVE,SAACR,GAChB,OACE,qBAAKC,UAAU,YAAf,SACCD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACzB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCOVM,EAZG,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAC/B,OACE,8BACA,uBACEZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,OC8BDG,E,4MAjCbC,MAAQ,CACNR,SAAU,GACVS,YAAa,I,EASfC,aAAe,SAACC,GACdC,QAAQC,IAAIF,EAAEG,OAAOC,OACrB,EAAKC,SAAS,CAAEP,YAAaE,EAAEG,OAAOC,S,uDARxC,WAAqB,IAAD,OAClBE,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKL,SAAS,CAAChB,SAAUqB,S,oBAQ1C,WAAU,IAAD,EAC2BC,KAAKd,MAA/BR,EADD,EACCA,SAAUS,EADX,EACWA,YACZc,EAAmBvB,EAASwB,QAAO,SAAA7B,GAAO,OAC9CA,EAAQE,KAAK4B,cAAcC,SAASjB,EAAYgB,kBAClD,OACE,sBAAKjC,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAckB,KAAKZ,eAErB,cAAC,EAAD,CAAUV,SAAUuB,W,GA5BVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ee35ac03.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n  return (\n  <div className='card-container'>\n    <img alt='monster' src={`https://robohash.org/${props.monster.id}set=set2&size=180x180`}/>\n    <h1>{props.monster.name}</h1>\n    <h2>{props.monster.email}</h2>\n  </div>\n  )\n};\n\nexport default Card;","import React from 'react';\nimport Card from '../card/card.component';\n\nconst CardList = (props) => {\n  return (\n    <div className='card-list'>\n    {props.monsters.map(monster => (\n      <Card key={monster.id} monster={monster}/>\n    ))}\n    </div>\n  )\n};\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({placeholder, handleChange}) => {\n  return (\n    <div>\n    <input\n      className='search'\n      type='search' \n      placeholder={placeholder}\n      onChange={handleChange}/>\n    </div>\n  )\n};\n\nexport default SearchBox;","import React, { Component } from 'react';\nimport './App.css';\nimport CardList from './components/card-list/card-list';\nimport SearchBox from './components/search-box/search-box.component'\n\nclass App extends Component {\n  state = {\n    monsters: [], \n    searchField: ''\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}))\n  }\n  \n  handleSearch = (e) => {\n    console.log(e.target.value)\n    this.setState({ searchField: e.target.value })\n  };\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())) \n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox \n          placeholder='Search monsters'\n          handleChange={this.handleSearch}\n          />\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}